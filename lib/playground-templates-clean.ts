export const codeTemplates = {
    basic_agent: {
        name: "Basic Agent",
        description: "A simple agent with basic instructions",
        code: [
            "import asyncio",
            "from agents import Agent, Runner",
            "",
            "async def main():",
            "    # Create a basic agent",
            "    agent = Agent(",
            '        name="Assistant",',
            '        instructions="You are a helpful assistant.",',
            "    )",
            "    ",
            "    # Run the agent",
            '    result = await Runner.run(agent, "Hello! How can you help me?")',
            '    print(f"Response: {result.final_output}")',
            "",
            'if __name__ == "__main__":',
            "    asyncio.run(main())",
        ].join("\n"),
    },

    function_tool_agent: {
        name: "Agent with Function Tools",
        description: "Agent that can use custom function tools",
        code: [
            "import asyncio",
            "from agents import Agent, Runner, function_tool",
            "",
            "@function_tool",
            "def calculate_tip(bill_amount: float, tip_percentage: float = 15.0) -> str:",
            '    """Calculate tip amount for a bill."""',
            "    tip = bill_amount * (tip_percentage / 100)",
            "    total = bill_amount + tip",
            '    return f"Tip: ${tip:.2f}, Total: ${total:.2f}"',
            "",
            "@function_tool",
            "def get_weather(location: str) -> str:",
            '    """Get weather information for a location."""',
            "    # Placeholder - would integrate with real weather API",
            '    return f"The weather in {location} is sunny and 72Â°F"',
            "",
            "async def main():",
            "    # Create agent with function tools",
            "    agent = Agent(",
            '        name="Assistant with Tools",',
            '        instructions="You are a helpful assistant that can calculate tips and check weather.",',
            "        tools=[calculate_tip, get_weather],",
            "    )",
            "    ",
            "    # Test the agent",
            "    result = await Runner.run(",
            "        agent, ",
            '        "I had dinner that cost $50. What should I tip, and what\'s the weather in San Francisco?"',
            "    )",
            '    print(f"Response: {result.final_output}")',
            "",
            'if __name__ == "__main__":',
            "    asyncio.run(main())",
        ].join("\n"),
    },

    handoff_agents: {
        name: "Agent Handoffs",
        description: "Multiple agents that can hand off to each other",
        code: [
            "import asyncio",
            "from agents import Agent, Runner",
            "",
            "# Specialized agents",
            "math_agent = Agent(",
            '    name="Math Expert",',
            '    instructions="You are a mathematics expert. Solve math problems step by step.",',
            ")",
            "",
            "writing_agent = Agent(",
            '    name="Writing Assistant",',
            '    instructions="You are a writing expert. Help with grammar, style, and composition.",',
            ")",
            "",
            "# Router agent that delegates to specialists",
            "router_agent = Agent(",
            '    name="Router",',
            "    instructions=(",
            '        "You are a helpful assistant that routes requests to specialists. "',
            '        "For math problems, handoff to Math Expert. "',
            '        "For writing help, handoff to Writing Assistant. "',
            '        "For other requests, handle them yourself."',
            "    ),",
            "    handoffs=[math_agent, writing_agent],",
            ")",
            "",
            "async def main():",
            "    # Test math handoff",
            "    result = await Runner.run(",
            "        router_agent,",
            '        "What is the derivative of x^2 + 3x + 5?"',
            "    )",
            '    print(f"Math Response: {result.final_output}")',
            '    print(f"Handled by: {result.agent_name}")',
            "    ",
            '    print("\\n" + "="*50 + "\\n")',
            "    ",
            "    # Test writing handoff",
            "    result = await Runner.run(",
            "        router_agent,",
            "        \"Can you help me improve this sentence: 'Me and my friend goes to store.'\"",
            "    )",
            '    print(f"Writing Response: {result.final_output}")',
            '    print(f"Handled by: {result.agent_name}")',
            "",
            'if __name__ == "__main__":',
            "    asyncio.run(main())",
        ].join("\n"),
    },
};

export type TemplateKey = keyof typeof codeTemplates;
